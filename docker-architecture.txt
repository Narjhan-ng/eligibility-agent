╔════════════════════════════════════════════════════════════════════╗
║         Insurance Eligibility Agent - Docker Architecture         ║
╚════════════════════════════════════════════════════════════════════╝

┌────────────────────────────────────────────────────────────────────┐
│                          Host Machine                              │
│                                                                    │
│  ┌──────────────────────────────────────────────────────────────┐ │
│  │              Docker Network: eligibility-agent-network       │ │
│  │                                                              │ │
│  │  ┌────────────────────────────────────────────────────────┐ │ │
│  │  │         eligibility-agent-app (Container)              │ │ │
│  │  │                                                        │ │ │
│  │  │  • FastAPI Application                                │ │ │
│  │  │  • Claude 3.5 Sonnet AI Agent                        │ │ │
│  │  │  • LangChain Tools                                   │ │ │
│  │  │  • Session Management                                │ │ │
│  │  │  • Python 3.11 slim                                  │ │ │
│  │  │                                                        │ │ │
│  │  │  Port Mapping: 8000:8000 ──────────► localhost:8000  │ │ │
│  │  │  Health: /health endpoint                            │ │ │
│  │  │  User: appuser (non-root)                           │ │ │
│  │  │  Image Size: 553 MB                                  │ │ │
│  │  │                                                        │ │ │
│  │  │  Environment:                                         │ │ │
│  │  │    - ANTHROPIC_API_KEY (from .env)                  │ │ │
│  │  │    - DATABASE_URL=postgresql://...@postgres:5432    │ │ │
│  │  │                                                        │ │ │
│  │  └────────────┬───────────────────────────────────────┘ │ │
│  │               │                                            │ │
│  │               │ Database Connection                        │ │
│  │               │ (TCP Port 5432)                           │ │
│  │               ↓                                            │ │
│  │  ┌────────────────────────────────────────────────────┐ │ │
│  │  │         eligibility-agent-db (Container)           │ │ │
│  │  │                                                    │ │ │
│  │  │  • PostgreSQL 15 Alpine                          │ │ │
│  │  │  • Conversation History Storage                  │ │ │
│  │  │  • Session State Persistence                     │ │ │
│  │  │                                                    │ │ │
│  │  │  Port Mapping: 5432:5432 ──────► localhost:5432 │ │ │
│  │  │  Health: pg_isready check                        │ │ │
│  │  │                                                    │ │ │
│  │  │  Credentials:                                     │ │ │
│  │  │    - User: postgres                              │ │ │
│  │  │    - Database: eligibility_agent                 │ │ │
│  │  │                                                    │ │ │
│  │  │  Volume Mount: ─────────────────────────────┐   │ │ │
│  │  │    /var/lib/postgresql/data                  │   │ │ │
│  │  └──────────────────────────────────────────────┼───┘ │ │
│  │                                                  │     │ │
│  └──────────────────────────────────────────────────┼─────┘ │
│                                                     │       │
│  ┌──────────────────────────────────────────────────┼─────┐ │
│  │         Docker Volume (Persistent Storage)       │     │ │
│  │                                                   │     │ │
│  │  eligibility-agent-postgres-data ◄───────────────┘     │ │
│  │                                                         │ │
│  │  • Survives container restarts                         │ │
│  │  • Database data persistence                           │ │
│  │  • Easy backup/restore                                 │ │
│  └─────────────────────────────────────────────────────────┘ │
│                                                              │
└──────────────────────────────────────────────────────────────┘

┌────────────────────────────────────────────────────────────────────┐
│                          Access Points                             │
├────────────────────────────────────────────────────────────────────┤
│  🌐 Web Interface:      http://localhost:8000                      │
│  💬 Chat Interface:     http://localhost:8000/chat                 │
│  📚 API Docs:           http://localhost:8000/docs                 │
│  ❤️  Health Check:       http://localhost:8000/health              │
│  🗄️  PostgreSQL:         postgresql://localhost:5432               │
└────────────────────────────────────────────────────────────────────┘

┌────────────────────────────────────────────────────────────────────┐
│                          Data Flow                                 │
├────────────────────────────────────────────────────────────────────┤
│                                                                    │
│  User Request                                                      │
│       ↓                                                           │
│  FastAPI Endpoint (Port 8000)                                     │
│       ↓                                                           │
│  Claude Agent + LangChain Tools                                   │
│       ↓                                                           │
│  Session Manager ←───→ PostgreSQL (Port 5432)                     │
│       ↓                                                           │
│  Response with Context                                            │
│                                                                    │
└────────────────────────────────────────────────────────────────────┘

┌────────────────────────────────────────────────────────────────────┐
│                      Build Process                                 │
├────────────────────────────────────────────────────────────────────┤
│                                                                    │
│  Stage 1: Builder                                                  │
│    ├─ Base: python:3.11-slim                                      │
│    ├─ Install: gcc, postgresql-client, libpq-dev                 │
│    ├─ Create: virtual environment                                 │
│    └─ Install: Python dependencies                                │
│                                                                    │
│  Stage 2: Runtime (Final Image)                                   │
│    ├─ Base: python:3.11-slim                                      │
│    ├─ Install: libpq5 (runtime only)                             │
│    ├─ Copy: virtual environment from builder                      │
│    ├─ Copy: application code                                      │
│    ├─ Create: non-root user (appuser)                            │
│    └─ Result: 553 MB optimized image                             │
│                                                                    │
└────────────────────────────────────────────────────────────────────┘

┌────────────────────────────────────────────────────────────────────┐
│                     Security Features                              │
├────────────────────────────────────────────────────────────────────┤
│  ✓ Non-root user execution                                        │
│  ✓ Isolated Docker network                                        │
│  ✓ Environment variables for secrets                              │
│  ✓ Health checks for monitoring                                   │
│  ✓ Minimal runtime dependencies                                   │
│  ✓ Read-only filesystem (optional)                                │
└────────────────────────────────────────────────────────────────────┘

┌────────────────────────────────────────────────────────────────────┐
│                    Management Commands                             │
├────────────────────────────────────────────────────────────────────┤
│  Start:       ./docker-run.sh start                                │
│  Stop:        ./docker-run.sh stop                                 │
│  Logs:        ./docker-run.sh logs                                 │
│  Status:      ./docker-run.sh status                               │
│  Shell:       ./docker-run.sh shell                                │
│  DB Shell:    ./docker-run.sh db-shell                             │
│  Rebuild:     ./docker-run.sh build                                │
└────────────────────────────────────────────────────────────────────┘
